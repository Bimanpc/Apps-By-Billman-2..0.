#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 22, 2021 07:45:27 PM EEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import THe OFFICIAL APP_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    THe OFFICIAL APP_support.set_Tk_var()
    top = Toplevel1 (root)
    THe OFFICIAL APP_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    THe OFFICIAL APP_support.set_Tk_var()
    top = Toplevel1 (w)
    THe OFFICIAL APP_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x705+-8+-8")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.183, rely=0.057, relheight=0.671
                , relwidth=0.69)
        self.Canvas1.configure(background="#0080ff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.PC_TECH_GR_THE_GRAND_ = tk.Text(self.Canvas1)
        self.PC_TECH_GR_THE_GRAND_.place(relx=0.265, rely=0.381, relheight=0.283
                , relwidth=0.418)
        self.PC_TECH_GR_THE_GRAND_.configure(background="white")
        self.PC_TECH_GR_THE_GRAND_.configure(font="TkTextFont")
        self.PC_TECH_GR_THE_GRAND_.configure(foreground="black")
        self.PC_TECH_GR_THE_GRAND_.configure(highlightbackground="#d9d9d9")
        self.PC_TECH_GR_THE_GRAND_.configure(highlightcolor="black")
        self.PC_TECH_GR_THE_GRAND_.configure(insertbackground="black")
        self.PC_TECH_GR_THE_GRAND_.configure(selectbackground="blue")
        self.PC_TECH_GR_THE_GRAND_.configure(selectforeground="white")
        self.PC_TECH_GR_THE_GRAND_.configure(wrap="word")

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.SITE_OFFICIAL = ttk.Notebook(self.Canvas1)
        self.SITE_OFFICIAL.place(relx=0.085, rely=0.613, relheight=0.478
                , relwidth=0.322)
        self.SITE_OFFICIAL.configure(takefocus="")
        self.SITE_OFFICIAL.configure(style=PNOTEBOOK)
        self.SITE OFFICIAL_t1 = tk.Frame(self.SITE_OFFICIAL)
        self.SITE_OFFICIAL.add(self.SITE OFFICIAL_t1, padding=3)
        self.SITE_OFFICIAL.tab(0, text="Page 1", compound="left", underline="-1"
                ,)
        self.SITE OFFICIAL_t1.configure(background="#d9d9d9")
        self.SITE OFFICIAL_t1.configure(highlightbackground="#d9d9d9")
        self.SITE OFFICIAL_t1.configure(highlightcolor="black")
        self.SITE OFFICIAL_t2 = tk.Frame(self.SITE_OFFICIAL)
        self.SITE_OFFICIAL.add(self.SITE OFFICIAL_t2, padding=3)
        self.SITE_OFFICIAL.tab(1, text="Page 2", compound="left", underline="-1"
                ,)
        self.SITE OFFICIAL_t2.configure(background="#d9d9d9")
        self.SITE OFFICIAL_t2.configure(highlightbackground="#d9d9d9")
        self.SITE OFFICIAL_t2.configure(highlightcolor="black")
        self.SITE_OFFICIAL.bind('<Button-1>',_button_press)
        self.SITE_OFFICIAL.bind('<ButtonRelease-1>',_button_release)
        self.SITE_OFFICIAL.bind('<Motion>',_mouse_over)

        self.http://pctechgreu.unaux.com/?z = tk.Checkbutton(self.Canvas1)
        self.http://pctechgreu.unaux.com/?z.place(relx=0.074, rely=0.127
                , relheight=0.053, relwidth=0.065)
        self.http://pctechgreu.unaux.com/?z.configure(activebackground="#ececec")
        self.http://pctechgreu.unaux.com/?z.configure(activeforeground="#000000")
        self.http://pctechgreu.unaux.com/?z.configure(background="#d9d9d9")
        self.http://pctechgreu.unaux.com/?z.configure(disabledforeground="#a3a3a3")
        self.http://pctechgreu.unaux.com/?z.configure(foreground="#000000")
        self.http://pctechgreu.unaux.com/?z.configure(highlightbackground="#d9d9d9")
        self.http://pctechgreu.unaux.com/?z.configure(highlightcolor="black")
        self.http://pctechgreu.unaux.com/?z.configure(justify='left')
        self.http://pctechgreu.unaux.com/?z.configure(text='''Check''')
        self.http://pctechgreu.unaux.com/?z.configure(variable=THe OFFICIAL APP_support.che48)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

if __name__ == '__main__':
    vp_start_gui()





